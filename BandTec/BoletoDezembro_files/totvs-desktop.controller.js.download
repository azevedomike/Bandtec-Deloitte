/**
 * @license TOTVS | Portal - TOTVS Educacional v12.1.15
 * (c) 2015-2016 TOTVS S/A https://www.totvs.com
 * License: Comercial
 */

define(['totvs-desktop/totvs-desktop.module',
    'totvs-desktop/totvs-desktop-contexto/totvs-desktop-contexto-curso.factory',
    'totvs-desktop/totvs-desktop-contexto/totvs-desktop-contexto-curso.controller',
    'aluno/dados-pessoais/dados-pessoais.factory',
    'totvs-desktop/totvs-desktop-termo-consentimento/totvs-desktop-termo-consentimento.service',
    'aluno/financeiro/financeiro.factory'],
function () {

    'use strict';

    var inicializa = true;

    angular
        .module('totvsDesktop')
        .run(['totvsDesktopService', function (objTotvsDesktopService) {
            var keyParam = objTotvsDesktopService.getParamURL('key');
            if (angular.isDefined(keyParam))
                inicializa = false;
        }])
        .controller('TotvsDesktopController', TotvsDesktopController);

    TotvsDesktopController.$inject = [
        '$rootScope',
        '$state',
        '$window',
        '$location',
        'i18nFilter',
        'totvsDesktopService',
        'TotvsDesktopContextoCursoFactory',
        'eduDadosPessoaisFactory',
        'eduEnumsConsts',
        'totvsDesktopTermoConsentimentoService',
        'EduPaymentsFactory',
        'totvs.app-notification.Service'
    ];

    /**
     * Controller principal
     * @param   {object} $rootScope                       Escopo principal
     * @param   {object} $window                          Objeto window angular
     * @param   {object} $location                        Objeto location angular
     * @param   {object} i18nFilter                       Objeto para tradução
     * @param   {object} objTotvsDesktopService           Serviços comuns
     * @param   {object} TotvsDesktopContextoCursoFactory Serviços de contexto
     * @param   {object} EduDadosPessoaisFactory          Dados do aluno
     * @param   {object} eduEnumsConsts                   Constantes do educacional
     * @param   {object} TotvsDesktopTermoConsentimentoService Serviços do Termo de Consentimento
     * @param   {object} EduPaymentsFactory               Serviços do Payments
     * @param   {object} totvsNotification                Objeto para notificações
     * @returns {object} Controller principal da aplicação
     */
    /*jshint maxparams: false*/
    function TotvsDesktopController($rootScope, $state, $window, $location, i18nFilter, objTotvsDesktopService,
        TotvsDesktopContextoCursoFactory, EduDadosPessoaisFactory, eduEnumsConsts, TotvsDesktopTermoConsentimentoService, EduPaymentsFactory, totvsNotification) {

        // *********************************************************************************
        // *** Variables
        // *********************************************************************************

        var self = this;

        // guarda as teclas pressionadas (utilizado nos atalhos)
        var keys = {};

        var KeyParams = "";

        // *********************************************************************************
        // *** Public Properties
        // *********************************************************************************
        self.headerInformations = [];
        self.srcDefaultLogo = EDU_CONST_GLOBAL_PATH_LOGO;
        self.nomeFilial = '';
        self.carregouContexto = false;
        self.selectedMenuGroup = undefined;
        self.selectedMenu = undefined;
        self.bodyFontSize = 1.4;
        self.objMenuList = [];
		self.objParamsHeader = {};

        // *********************************************************************************
        // *** Public Methods
        // *********************************************************************************
        self.getSelectedMenu = getSelectedMenu;
        self.abrirContextoCurso = abrirContextoCurso;
        self.openMenuClick = openMenuClick;
        self.loadAluno = loadAluno;
        self.toggleMenu = toggleMenu;
        self.fixedMenu = fixedMenu;
        self.redirect = redirect;
        self.hasPendingRequests = hasPendingRequests;
        self.loadParams = loadParams;
        self.increaseFontSize = increaseFontSize;
        self.decreaseFontSize = decreaseFontSize;
        self.changeContrast = changeContrast;
		
		self.showMenu = false;

        // *********************************************************************************
        // *** Controller Initialize
        // *********************************************************************************
        if (inicializa)
            preInit();

        // Valida o usuário no server
        $rootScope.$on('ValidarUsuario', function (event, args) {
            if (KeyParams !== args.keyParam) {
                KeyParams = args.keyParam;
                objTotvsDesktopService.realizaLoginFrameHTML(args.keyParam, function () {
                    preInit();
                    $window.location.href = $window.location.href.split('#')[0] + '#' + args.route;
                });
            }
        });

        /**
         * @private
         * @function Função de pré-inicialização do controller
         * @name preInit
         */
        function preInit() {
            //Configurar idioma padrão da tradução
            $rootScope.currentuser = { dialect: EDU_CONST_GLOBAL_CUSTOM_IDIOMA };

            //Definir um valor inicial para o objeto, para que se possa controlar a exibição da logo
            self.objParamsHeader.LogoPortal = 'init';

            var changePass = objTotvsDesktopService.getParamURL('cpsw'); //changepsw
            if (angular.isDefined(changePass)) {
                var user = objTotvsDesktopService.getParamURL('user');
                if (user)
                    sessionStorage.setItem('user_change_pass', user);

                $window.location.href = $window.location.href.split('#')[0] + 'login/?cpsw';
            }
            else {
                init();
            }
        }

        /**
         * @private
         * @function Função de inicialização do controller
         * @name init
         */
        function init() {

            //Realiza a inicialização da aplicação através da seleção de contexto educacional
            inicializarAppSelecaoContextoEducacionalAsync();

            definirTratamentoEventosGlobais();

            // Carrega as permissões
            objTotvsDesktopService.loadPermissions();

            //configura tipo de menu a ser exibido
            self.selectedMenuGroup = 'apps';

            // configura teclas de atalho
            $(document).keydown(adicionarTecla);
            $(document).keyup(removerTecla);
        }

        // *********************************************************************************
        // *** Public Functions
        // *********************************************************************************

        /**
         * @public
         * @function Retorna o menu selecinado
         * @name getSelectedMenu
         * @returns {object} Menu selecionado
         */
        function getSelectedMenu() {

            if (!self.selectedMenu) {
                var path = $location.path();
                for (var i = 0; i < self.objMenuList.length; i++) {
                    if (path === self.objMenuList[i].url) {
                        self.selectedMenu = self.objMenuList[i];
                        break;
                    }
                    else if (self.objMenuList[i].submenus.length > 0) { // submenus
                        for (var j = 0; j < self.objMenuList[i].submenus.length; j++) {
                            if (path === self.objMenuList[i].submenus[j].url) {
                                self.selectedMenu = self.objMenuList[i].submenus[j];
                                break;
                            }
                        }
                    }
                }
            }

            return self.selectedMenu;
        }

        /**
         * @public
         * @function Carrega os parâmetros de customização
         * @name loadParams
         */
        function loadParams() {
            objTotvsDesktopService.loadParamsHeader(function (objParams) {
                self.objParamsHeader = objParams;

                if (!self.objParamsHeader.CorCabecalho || self.objParamsHeader.CorCabecalho === '') {
                    self.objParamsHeader.CorCabecalho = '#fff';
                }

                if (!self.objParamsHeader.CorFonteCabecalho || self.objParamsHeader.CorFonteCabecalho === '') {
                    self.objParamsHeader.CorFonteCabecalho = '#000';
                }

                if (!self.objParamsHeader.CorMenu || self.objParamsHeader.CorMenu === '') {
                    self.objParamsHeader.CorMenu = '#1e99c0';
                }

                if (!self.objParamsHeader.CorFonteMenu || self.objParamsHeader.CorFonteMenu === '') {
                    self.objParamsHeader.CorFonteMenu = '#fff';
                }

                self.objParamsHeader.HotLink1Icon = objTotvsDesktopService.getIconsMenu('', self.objParamsHeader.HotLink1);
                self.objParamsHeader.HotLink2Icon = objTotvsDesktopService.getIconsMenu('', self.objParamsHeader.HotLink2);
                self.objParamsHeader.HotLink3Icon = objTotvsDesktopService.getIconsMenu('', self.objParamsHeader.HotLink3);
            });
        }

        /**
         * @public
         * @function Define variável para controle das requisições http que estão pendentes
         * @name hasPendingRequests
         * @returns {boolean} Verdadeiro se existe requisição pendente
         */
        function hasPendingRequests() {
            return ($rootScope.pendingRequests > 0);
        }

        /**
         * @public
         * @function Carrega informações do aluno
         * @name loadAluno
         */
        function loadAluno() {
            EduDadosPessoaisFactory.buscaDadosPessoais({},
                function (result) {
                    if (angular.isArray(result['SAluno']) && result['SAluno'].length > 0) {
                        EduPaymentsFactory.getQtdeCartoesCarteiraDigital(function (listaCarteira) {
                            var acoes = [];

                            acoes.push({label: i18nFilter('l-CadastroAcademico'), link: '#/dados-pessoais'});
                            
                            if (listaCarteira && listaCarteira.CARTOES > 0) {
                                acoes.push({label: 'Carteira Digital', link: '#/carteira-digital-lista'});
                                acoes.push({label: 'Gerenciar Recorrências', link: '#/financeiro.recorrencia-lista'});
                            }

                            if (self.objParamsHeader.PermiteAlterarSenha) {
                                acoes.push({label: 'Alterar senha', link: 'login/?cpsw&noMessage'});
                            }

                            self.labelSair = i18nFilter('l-sair');

                            self.headerInformations.menus = [{
                                img: {
                                    src: result['SAluno'][0].IMAGEM,
                                    alt: result['SAluno'][0].NOMEALUNO
                                },
                                itens: acoes
                            }];
                        });
                    }
                });
        }

        /**
         * @public
         * @function Abre modal para usuário alterar o curso que está salvo no contexto
         * @name abrirContextoCurso
         * @param {object} result Contexto selecionado
         */
        function abrirContextoCurso(result) {
            TotvsDesktopContextoCursoFactory.abrirModalCursos(result, preencherDadosUsuario);
        }

        /**
         * @public
         * @function Executa as ações ao clicar em um menu
         * @name openMenuClick
         * @param {object} objMenu Objeto do menu clicado
         */
        function openMenuClick(objMenu) {

            if (!objMenu) {
                return;
            }

            self.selectedMenu = objMenu;

            if (objMenu.url === '#') {
                var jObj = $('#' + objMenu.id).children('.submenu-item');
                if ($(jObj).css('display') === 'none') {
                    $(jObj).show();
                    $(jObj).prev().children('.glyphicon').attr('class', 'glyphicon ico-chevron-up');
                } else {
                    $(jObj).hide();
                    $(jObj).prev().children('.glyphicon').attr('class', 'glyphicon ico-chevron-down');
                }

                // Se o menu não estiver aberto
                $('#menu-desktop').addClass('toggled');

            } else {
                // Se o menu estiver aberto
                $('#menu-desktop').removeClass('toggled');

                if (typeof (objMenu.function) == typeof (Function)) {
                    objMenu.function().then(function (url) {
                        $window.open(url, '_blank');
                    }).catch(function (mensagemErro) {
                        totvsNotification.notify({
                            type: 'error',
                            title: i18nFilter('l-titulo-msg-erro-acessar-menu'),
                            detail: mensagemErro
                        });
                    });
                } else {
                    if (objMenu.url.indexOf('http') !== -1) {
                        $window.open(objMenu.url, '_blank');
                    }
                    else {
                        $location.url(objMenu.url);
                    }
                }
            }
        }

        /**
         * @public
         * @function Esconde/Mostra a sidebar com os menus
         * @name toggleMenu
         */
        function toggleMenu() {
            $('#menu-desktop').toggleClass('toggled');
        }

        /**
         * @public
         * @function Define se a sidebar ficará fixa estendida
         * @name fixedMenu
         */
        function fixedMenu() {
            $('#menu-desktop').removeClass('toggled');
            $('#menu-desktop').toggleClass('fixed-menu');
        }

        /**
         * @public
         * @function Redireciona para uma página
         * @name redirect
         * @param {string} Endereço da página a ser redirecionada
         */
        function redirect(url) {
            if (angular.isDefined(self.selectedMenu) && self.selectedMenu.url !== url) {
                self.selectedMenu = undefined;
            }
            $location.path(url);
        }

        /** Barra de Acessibilidade */
        /**
         * @public
         * @function Incrementa o tamanho da fonte
         * @name increaseFontSize
         */
        function increaseFontSize() {
            if (self.bodyFontSize < 2) {
                self.bodyFontSize += 0.5;
                $('body').css('font-size', self.bodyFontSize + 'rem');
            }
        }

        /**
         * @public
         * @function Decrementa o tamanho da fonte
         * @name decreaseFontSize
         */
        function decreaseFontSize() {
            if (self.bodyFontSize > 0.5) {
                self.bodyFontSize -= 0.2;
                $('body').css('font-size', self.bodyFontSize + 'rem');
            }
        }

        /**
         * @public
         * @function Mudar o contraste do portal
         * @name changeContrast
         */
        function changeContrast() {
            // the css we are going to inject
            var objCss = {
                            '-webkit-filter': 'invert(100%)',
                            '-moz-filter': 'invert(100%)',
                            '-o-filter': 'invert(100%)',
                            '-ms-filter': 'invert(100%)',
                            'filter': 'invert(100%)'
                        };

            if (!$window.hasContrast) {
                $window.hasContrast = true;
            } else {
                $window.hasContrast = false;
                objCss = {
                            '-webkit-filter': 'invert(0%)',
                            '-moz-filter': 'invert(0%)',
                            '-o-filter': 'invert(0%)',
                            '-ms-filter': 'invert(0%)',
                            'filter': 'invert(0%)'
                        };
            }

            $('html').css(objCss);
        }
        /** Fim Barra de Acessibilidade */

        // *********************************************************************************
        // *** Private Functions
        // *********************************************************************************

        /**
         * @private
         * @function Realiza a inicialização da aplicação através da seleção de contexto educacional
         * @name inicializarAppSelecaoContextoEducacionalAsync
         */
        function inicializarAppSelecaoContextoEducacionalAsync() {
            objTotvsDesktopService.verificaUsuarioLogadoSetInfoLogin(configurarSelecaoCurso);
        }

        /**
         * @private
         * @function Preenche os dados do aluno logado no header da página
         * @name preencherDadosUsuario
         * @param {Array} listaCursos Lista de cursos
         */
        function preencherDadosUsuario(listaCursos) {

            var itemContexto = TotvsDesktopContextoCursoFactory.getCursoSelecionado(),
                linkAlterar;

            if (itemContexto != null) {

                self.headerInformations = [];

                var alunoERA = itemContexto.cursoSelecionado.NOMEALUNO;
                alunoERA += ' (' + i18nFilter('l-ra') + ': ' + itemContexto.cursoSelecionado.RA + ')';

                self.userInfo = alunoERA;

                if (itemContexto.entrarComo === TotvsDesktopContextoCursoFactory.tipoUsuarioEnum.Aluno) {
                    linkAlterar = i18nFilter('l-alterar-curso');
                } else {
                    linkAlterar = i18nFilter('l-alterar-aluno');
                }

                if (listaCursos === undefined || listaCursos.length > 1) {
                    self.headerInformations.push({
                        label: linkAlterar,
                        action: self.abrirContextoCurso,
                        title: linkAlterar + ' (CTRL + SHIFT + A)'
                    });
                }

                self.headerInformations.push({
                    label: itemContexto.cursoSelecionado.NOMECURSO,
                    title: itemContexto.cursoSelecionado.NOMECURSO
                });

                if (itemContexto.cursoSelecionado.APRESENTACAO === eduEnumsConsts.EduTipoApresentacaoEnum.EnsinoBasico.toString()) {
                    self.headerInformations.push({
                        label: itemContexto.cursoSelecionado.NOMEHABILITACAO,
                        title: itemContexto.cursoSelecionado.NOMEHABILITACAO
                    });
                }

                self.nomeFilial = itemContexto.cursoSelecionado.NOMEFILIAL;

                // Carrega os parâmetros do Cabeçalho
                self.loadParams();
                // Carrega informações do aluno
                self.loadAluno();

                self.carregouContexto = true;
            }

            // Atualiza o menu
            $rootScope.$broadcast('OnChangeCursoSelecionadoEmit:Event', {});
        }

        /**
         * @private
         * @function Configuração da seleção de curso
         * @name configurarSelecaoCurso
         * @param {object} result Resultado de um callback
         */
        function configurarSelecaoCurso(result) {
            // verifica se aluno não possui nenhum curso
            if (result.length === 0) {
                self.abrirContextoCurso(result);
                return;
            }

            // se possuir apenas 1 curso, seta o contexto automaticamente e não abre o modal
            if (result.length === 1 || contextosMesmoCurso(result)) {
                TotvsDesktopContextoCursoFactory.selecionarCurso(result[0], true, function () {
                    loadPostContexto();
                    preencherDadosUsuario(result);
                });
                return;
            } else {

                var houveAlteracaoUsuarioSelecionado = TotvsDesktopContextoCursoFactory.verificarAlteracaoUsuario(result),
                    contextoSelecionadoCookie = TotvsDesktopContextoCursoFactory.getCursoSelecionado(),
                    contextoSelecionadoCookieVazio = (contextoSelecionadoCookie == null);

                // se possuir mais de 1 curso
                // ou se for responsável por mais de um aluno
                // ou se for aluno e responsável
                if (houveAlteracaoUsuarioSelecionado || contextoSelecionadoCookieVazio) {
                    // se houve alteração de usuário abre modal para seleção de curso
                    self.abrirContextoCurso(result);
                } else {

                    var contextoCurso = retornaContextoCursoValidoPorCursoCookie(result, contextoSelecionadoCookie.cursoSelecionado);

                    if (contextoCurso) {
                        TotvsDesktopContextoCursoFactory.selecionarCurso(contextoCurso, true, function () {
                            loadPostContexto();
                            preencherDadosUsuario(result);
                        });
                        return;
                    }
                    else {
                        self.abrirContextoCurso(result);
                        return;
                    }
                }
            }
        }

        /**
         * @private
         * @function Retorna o contexto válido a partir do cookie selecionado anteriormente
         * @name retornaContextoCursoValidoPorCursoCookie
         * @param   {Array}  listaCursos               Lista de Cursos
         * @param   {object} contextoSelecionadoCookie Contexto selecionado
         * @returns {object} Contexto selecionado
         */
        function retornaContextoCursoValidoPorCursoCookie(listaCursos, contextoSelecionadoCookie) {

            var contexto = null;

            if (listaCursos) {
                for (var i = 0; i < listaCursos.length; i++) {
                    if (listaCursos[i].contexto) {

                        var contextoValido = true;

                        for (var nome in contextoSelecionadoCookie.contexto) {

                            //Os campos "Controle", "$messages" e "$length" não serão comparados
                            if (nome !== 'Controle' && nome !== '$messages' && nome !== '$length' &&
                                contextoSelecionadoCookie.contexto[nome] !== listaCursos[i].contexto[nome]) {

                                contextoValido = false;
                                break;
                            }
                        }

                        if (contextoValido) {
                            contexto = listaCursos[i];
                            break;
                        }
                    }
                }
            }

            return contexto;
        }

        /**
         * @private
         * @function Valida se os contextos se referem a um mesmo curso
         * @name contextosMesmoCurso
         * @param   {object}  result Objeto de um callback
         * @returns {boolean} Verdadeiro se os contextos são do mesmo curso
         */
        function contextosMesmoCurso(result) {
            var curso = result[0].CODCOLIGADA.toString() + result[0].IDHABILITACAOFILIAL.toString() + result[0].RA.toString();
            for (var i = 1; i < result.length; i++) {
                var cursoAtual = result[i].CODCOLIGADA.toString() + result[i].IDHABILITACAOFILIAL.toString() + result[i].RA.toString();

                if (curso !== cursoAtual) {
                    return false;
                }
            }
            return true;
        }

        /**
         * @private
         * @function Carrega informações após definição do contexto
         * @name loadPostContexto
         */
        function loadPostContexto() {
            self.loadParams();
            self.loadAluno();
        }

        /**
         * @private
         * @function Adicionar atalhos
         * @name adicionarTecla
         * @param {object} e Objeto do evento
         */
        function adicionarTecla(e) {
            keys[e.which] = true;
            executarAtalhos();
        }

        /**
         * @private
         * @function Remover atalhos
         * @name removerTecla
         * @param {object} e Objeto do evento
         */
        function removerTecla(e) {
            delete keys[e.which];
        }

        /**
         * @private
         * @function Executa atalhos
         * @name executarAtalhos
         */
        function executarAtalhos() {

            if (keys[16] && keys[17] && keys[65]) {
                // se pressionou as teclas CTRL + SHIFT + A: abre modal para alterar curso
                self.abrirContextoCurso();
            }

        }

        /**
         * @private
         * @function Tratamento de eventos globais
         * @name definirTratamentoEventosGlobais
         */
        function definirTratamentoEventosGlobais() {

            /**
            * Refresh nos menus ao alterar o contexto educacinoal para atualizar o
            * guid das urls externas
            */
            $rootScope.$on('OnChangeCursoSelecionadoEmit:Event', function () {

    				// Load List Menu Applications
    				objTotvsDesktopService.getMenuCorporeRMAsync(function (result) {
      					objTotvsDesktopService.getMenuPortalEducacional(function (data) {
      						//Caso o usuário não tenha permissão nas funcionalidades do portal antigo, remove o menu do novo portal.
      						if (result && result.length <= 0) {
                                var indice = null;

                                //Tem que utilizar o for, pois o IE não aceita findIndex()
                                for (var i = 0; i < data.length; i++) {
                                    if (data[i].id === 'EDU_PORTAL_CORPORERM') {
                                        indice = i;
                                        break;
                                    }
                                }

      							if (indice != -1) {
      								data.splice(indice, 1);
      							}
      						}

                            self.objMenuList = data;
                            verificaVisibilidadeMenuMatriculaES();
         					self.getSelectedMenu();
      					});
              });
                
                TotvsDesktopTermoConsentimentoService.consultaAceiteTermosConsentimento();
                
                if ($rootScope.startApp === true) {
                    $rootScope.startApp = false;
                    $state.go('mural.start', null);
                }
            });

            //Toda vez que uma nova view é apresentada, será verificado se o usuário está logado,
            //caso não esteja o mesmo estará com a sessão expirada e será redirecionado para  tela de login
            $rootScope.$on('$stateChangeStart', function () {
                objTotvsDesktopService.verificaUsuarioLogadoAsync();
            });

            $rootScope.$on('$stateChangeSuccess', function () {
                self.getSelectedMenu();
            });
        }

        function verificaVisibilidadeMenuMatriculaES() {
             if (EDU_CONST_PORTAL_MATRICULAES == false) {

                var listaItensMenu = [];

                for (var i = 0; i < self.objMenuList.length ; i++) {
                    if (self.objMenuList[i].id !== 'EDU_PORTAL_MATRICULAES') {
                        listaItensMenu.push(self.objMenuList[i]);
                    }
                }

                self.objMenuList = listaItensMenu;
            }

        }
    }
});
