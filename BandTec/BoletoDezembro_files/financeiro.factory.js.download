/**
 * @license TOTVS | Portal - TOTVS Educacional v12.1.15
 * (c) 2015-2016 TOTVS S/A https://www.totvs.com
 * License: Comercial
 * @description
 */

define(['aluno/financeiro/financeiro.module'], function () {

    'use strict';

    angular
        .module('eduFinanceiroModule')
        .factory('EduFinanceiroFactory', EduFinanceiroFactory)
        .factory('EduPaymentsFactory', EduPaymentsFactory);

    EduFinanceiroFactory.$inject = ['$totvsresource', '$modal'];
    EduPaymentsFactory.$inject = ['$totvsresource', '$modal'];

    // *********************************************************************************
    // *** Factory
    // *********************************************************************************
    function EduFinanceiroFactory($totvsresource, $modal) {

        var url = CONST_GLOBAL_URL_BASE_SERVICOS + 'TOTVSEducacional/Financeiro/:method',
            factory;

        factory = $totvsresource.REST(url, {}, {});
        factory.buscarBeneficios = buscarBeneficios;
        factory.buscaHistoricoFinanceiro = buscaHistoricoFinanceiro; // Busca todos os lançamentos
        factory.geraSegundaVia = geraSegundaVia;
        factory.geraSegundaViaExtratoFinanceiro = geraSegundaViaExtratoFinanceiro;
        factory.geraSegundaViaMatricula = geraSegundaViaMatricula;
        factory.gerarRecibo = gerarRecibo;
        factory.exibirDadosPagCartao = exibirDadosPagCartao;
        factory.exibirModalBoleto = exibirModalBoleto;
        factory.retornarDadosPagCartao = retornarDadosPagCartao;
        factory.retornarUrlPagBuyPage = retornarUrlPagBuyPage;
        factory.retornarUrlPagCheckoutCielo = retornarUrlPagCheckoutCielo;
        factory.retornarScriptGetNet = retornarScriptGetNet;

        return factory;

        // *********************************************************************************
        // *** Functions
        // *********************************************************************************

        /**
         * Buscar registros de benefícios do aluno
         *
         * @param {any} callback - Função de callback, se necessário.
         * @returns Benefícios do aluno.
         */
        function buscarBeneficios(callback) {
            var parameters = {
                method: 'BolsasAluno',
                start: 0,
                limit: 1000
            };

            return factory.TOTVSGet(parameters, callback);
        }

        /**
         * Gera segunda via do boleto
         * @param {int} idBoleto - Id do Boleto a ser gerado.
         * @param {String} nossoNumero - Nosso número.
         * @param {datetime} dtVencimento - Data de vencimento do boleto.
         * @param {Function} callback - Função de callback, se necessário.
         * @returns Segunda via do boleto do aluno.
         */
        function geraSegundaVia(idBoleto, nossoNumero, dtVencimento, callback) {
            var parameters = {};
            parameters['method'] = '2aViaBoletoAluno';
            parameters['idBoleto'] = idBoleto;
            parameters['nossoNumero'] = nossoNumero === null ? "" : nossoNumero;
            parameters['dtVencimento'] = dtVencimento;

            return factory.TOTVSQuery(parameters, callback);
        }

        /**
         * Gera segunda via de boleto no extrato financeiro
         * @param {int} idBoleto - Id do Boleto a ser gerado.
         * @param {String} nossoNumero - Nosso número.
         * @param {datetime} dtVencimento - Data de vencimento do boleto.
         * @param {Function} callback - Função de callback, se necessário.
         * @returns Segunda via do boleto do aluno.
         */
        function geraSegundaViaExtratoFinanceiro(idBoleto, nossoNumero, dtVencimento, callback) {
            var parameters = {};
            parameters['method'] = '2aViaBoletoAlunoPorTipoRelatorio';
            parameters['idBoleto'] = idBoleto;
            parameters['nossoNumero'] = nossoNumero === null ? "" : nossoNumero;
            parameters['dtVencimento'] = dtVencimento;
            parameters['tipoExibicaoRelatorio'] = 'JPEG';

            return factory.TOTVSQuery(parameters, callback);
        }

        /**
         * Gera segunda via de boleto da finalização da matrícula
         * @param {int} idBoleto - Id do Boleto a ser gerado.
         * @param {String} nossoNumero - Nosso número.
         * @param {datetime} dtVencimento - Data de vencimento do boleto.
         * @param {int} - Id do Período letivo
         * @param {Function} callback - Função de callback, se necessário.
         * @returns Benefícios do aluno.
         */
        function geraSegundaViaMatricula(idBoleto, nossoNumero, dtVencimento, idPerlet, callback) {
            var parameters = {};
            parameters['method'] = '2aViaBoletoAlunoMatricula';
            parameters['idBoleto'] = idBoleto;
            parameters['nossoNumero'] = nossoNumero === null ? "" : nossoNumero;
            parameters['dtVencimento'] = dtVencimento;
            parameters['idPerlet'] = idPerlet;

            return factory.TOTVSQuery(parameters, callback);
        }

        /**
         * Gerar o recibo do boleto informado
         * @param {int} idBoleto - Id do Boleto a ser gerado.
         * @param {Function} callback - Função de callback, se necessário.
         * @returns Benefícios do aluno.
         */
        function gerarRecibo(idBoleto, callback) {
            var parameters = {};
            parameters['method'] = 'ReciboAluno';
            parameters['idBoleto'] = idBoleto;

            return factory.TOTVSQuery(parameters, callback);
        }

        /**
         * Busca os registros de boletos
         *
         * @param {any} todosAbertos - Exibe todos os boletos abertos
         * @param {any} startAt - Início dos registros retornados.
         * @param {any} limitAt - Limite de registros retornados.
         * @param {any} callback - Função de callback, se necessário.
         * @returns Benefícios do aluno.
         */
        function buscaHistoricoFinanceiro(todosAbertos, startAt, limitAt, callback) {
            var pStart = startAt || 0,
                pLimit = limitAt || 0,
                parameters = {};

            parameters['method'] = 'ExtratoFinanceiroAluno';
            parameters['todosAbertos'] = todosAbertos;
            parameters['start'] = pStart;
            parameters['limit'] = pLimit;

            return factory.TOTVSGet(parameters, callback);
        }

        /**
         * Abri o modal de Pagamento do Boleto
         *
         * @param {int} idBoleto - Identificador do boleto
         */
        function exibirDadosPagCartao(idBoleto) {
            
            var params = {
                idBoleto: idBoleto
            };

            $modal.open({
                templateUrl: EDU_CONST_GLOBAL_URL_BASE_APP + '/js/aluno/financeiro/lancamentos/lancamentos-pagcartao.view.html',
                controller: 'EduPagCartaoController',
                controllerAs: 'controller',
                size: 'lg',
                resolve: {
                    parametros: function () {
                        return params;
                    }
                },
                backdrop: 'true'
            });
        }

        /**
         /**
         * Abre o modal de 2a via de boleto
         */
        function exibirModalBoleto(idBoleto, nossoNumero, dataVencimentoBoleto) {

            var params = {
                idBoleto: idBoleto,
                nossoNumero: nossoNumero,
                dataVencimentoBoleto: dataVencimentoBoleto
            };

            geraSegundaViaExtratoFinanceiro(idBoleto, nossoNumero, dataVencimentoBoleto, function (result) {
                if (result && result[0]['Bytes']) {

                    params.jpegRelatorioBoleto = result[0].Bytes;

                    $modal.open({
                        templateUrl: EDU_CONST_GLOBAL_URL_BASE_APP + '/js/aluno/financeiro/lancamentos/boleto/impressao-boleto.view.html',
                        controller: 'EduImpressaoBoletoController',
                        controllerAs: 'controller',
                        size: 'lg',
                        resolve: {
                            parametros: function () {
                                return params;
                            }
                        },
                        backdrop: 'true'
                    });

                }
            });
        }

        /**
         * Buscar registros dos dados para pagamento do boleto com cartão.
         *
         * @param {any} idBoleto - Id do boleto para pagamento.
         * @param {any} callback - Função de callback, se necessário.
         * @returns Dados para pagamento do boleto com cartão.
         */
        function retornarDadosPagCartao(idBoleto, callback) {

            var parameters = {
                method: 'DadosPagCartao',
                idBoleto: idBoleto
            };

            return factory.TOTVSGet(parameters, callback);
        }

        /**
         * Buscar url para pagamento BuyPage.
         *
         * @param {any} idBoleto - Id do boleto para pagamento.
         * @param {any} valorBoleto - Id do boleto para pagamento.
         * @param {any} bandeira - Id do boleto para pagamento.
         * @param {any} produto - Id do boleto para pagamento.
         * @param {any} parcelas - Id do boleto para pagamento.
         * @param {any} urlRetorno - Id do boleto para pagamento.
         * @param {any} callback - Função de callback, se necessário.
         * @returns Dados para pagamento do boleto com cartão.
         */
        function retornarUrlPagBuyPage (idBoleto,
        valorBoleto,
        bandeira,
        produto,
        parcelas,
        urlRetorno,
        callback) {

            var parameters = {
                method: 'UrlBuyPageCielo',
                idBoleto: idBoleto,
                valorBoleto: valorBoleto,
                bandeira: bandeira,
                produto: produto,
                parcelas: parcelas,
                urlRetorno: urlRetorno
            };

            return factory.TOTVSGet(parameters, callback);
        }

        /**
         * Buscar url para pagamento Checkout Cielo.
         *
         * @param {any} idBoleto - Id do boleto para pagamento.
         * @param {any} descricaoBoleto - Id do boleto para pagamento.
         * @param {any} valorBoleto - Id do boleto para pagamento.
         * @param {any} nomeRespFinanceiro - Id do boleto para pagamento.
         * @param {any} emailRespFinanceiro - Id do boleto para pagamento.
         * @param {any} cpfRespFinanceiro - Id do boleto para pagamento.
         * @param {any} telefoneRespFinanceiro - Id do boleto para pagamento.
         * @param {any} callback - Função de callback, se necessário.
         * @returns Dados para pagamento do boleto com cartão.
         */
        function retornarUrlPagCheckoutCielo (idBoleto,
        descricaoBoleto,
        valorBoleto,
        nomeRespFinanceiro,
        emailRespFinanceiro,
        cpfRespFinanceiro,
        telefoneRespFinanceiro,
        callback) {

            var parameters = {
                method: 'UrlCheckOutCielo',
                idBoleto: idBoleto,
                descricaoBoleto: descricaoBoleto,
                valorBoleto: valorBoleto,
                nomeRespFinanceiro: nomeRespFinanceiro,
                emailRespFinanceiro: emailRespFinanceiro,
                cpfRespFinanceiro: cpfRespFinanceiro,
                telefoneRespFinanceiro: telefoneRespFinanceiro
            };

            return factory.TOTVSGet(parameters, callback);
        }

        /**
         * Busca script de configuração do IFrame do GetNet.
         *
         * @param {any} valorCompra - Valor do boleto.
         * @param {any} PrimeiroNome_Comprador -
         * @param {any} sobreNome_Comprador -
         * @param {any} cpfcnpj_Comprador -
         * @param {any} email_Comprador -
         * @param {any} telefone_Comprador -
         * @param {any} endereco_Comprador -
         * @param {any} NumeroResidencia_Comprador -
         * @param {any} complementoResidencia_Comprado -
         * @param {any} bairro_Comprador
         * @param {any} cidade_Comprador
         * @param {any} estado_Comprador
         * @param {any} cep_Comprador -
         * @param {any} pais_Comprador -
         * @param {any} produto -
         * @param {any} buttonclass
         * @param {any} IdBolet
         * @param {any} pagamentoCartaoDebito
         * @param {any} pagamentoCartaoCredito
         * @param {any} callback - Função de callback, se necessário.
         * @returns Dados para pagamento do boleto com cartão.
         */
        function retornarScriptGetNet (valorCompra,
            PrimeiroNome_Comprador, sobreNome_Comprador, cpfcnpj_Comprador, email_Comprador,
            telefone_Comprador, endereco_Comprador, NumeroResidencia_Comprador, complementoResidencia_Comprador,
            bairro_Comprador, cidade_Comprador, estado_Comprador, cep_Comprador, pais_Comprador, produto, buttonclass, IdBoleto,
            pagamentoCartaoDebito, pagamentoCartaoCredito, callback) {

            var parameters = {
                method: 'UrlIFrameGetNet',
                valorCompra: valorCompra,
                PrimeiroNome_Comprador: PrimeiroNome_Comprador,
                sobreNome_Comprador: sobreNome_Comprador,
                cpfcnpj_Comprador: cpfcnpj_Comprador,
                email_Comprador: email_Comprador,
                telefone_Comprador: telefone_Comprador,
                endereco_Comprador: endereco_Comprador,
                NumeroResidencia_Comprador: NumeroResidencia_Comprador,
                complementoResidencia_Comprador: complementoResidencia_Comprador,
                bairro_Comprador: bairro_Comprador,
                cidade_Comprador: cidade_Comprador,
                estado_Comprador: estado_Comprador,
                cep_Comprador: cep_Comprador,
                pais_Comprador: pais_Comprador,
                produto: produto,
                buttonclass: buttonclass,
                IdBoleto: IdBoleto,
                pagamentoCartaoDebito: pagamentoCartaoDebito,
                pagamentoCartaoCredito: pagamentoCartaoCredito
            };

            return factory.TOTVSGet(parameters, callback);
        }
    }

    function EduPaymentsFactory($totvsresource, $modal) {
        var url = CONST_GLOBAL_URL_BASE_SERVICOS + 'TOTVSEducacional/v1/Payments/:method',
            factory;

        factory = $totvsresource.REST(url, {}, {});
        factory.getExtratoFinanceiroNew = getExtratoFinanceiroNew;
        factory.getDadosBoleto = getDadosBoleto;
        factory.getDadosUsuarios = getDadosUsuarios;
        factory.getResumoPagamento = getResumoPagamento;
        factory.getCarteiraDigital = getCarteiraDigital;
        factory.getQtdeCartoesCarteiraDigital = getQtdeCartoesCarteiraDigital;
        factory.novoCartao = novoCartao;
        factory.apagarCartao = apagarCartao;
        factory.getCamposAntiFraude = getCamposAntiFraude;
        factory.gravaRecorrencia = gravaRecorrencia;
        factory.getRecorrencias = getRecorrencias;
        factory.apagarRecorrencia = apagarRecorrencia;
        factory.alterarCartaoRecorrencia = alterarCartaoRecorrencia;
        factory.retornaListaPaisesAsync = retornaListaPaisesAsync;
        factory.retornaListaEstadosAsync = retornaListaEstadosAsync;

        return factory;

        function getExtratoFinanceiroNew(callback) {
            var parameters = {};
            parameters['method'] = 'ExtratoFinanceiroNew';

            return factory.TOTVSGet(parameters, callback);
        }

        function getDadosBoleto(coligada, idboleto, callback) {
            var parameters = {};
            parameters['method'] = 'DadosBoleto';
            parameters['codColigada'] = coligada;
            parameters['idBoleto'] = idboleto;

            return factory.TOTVSGet(parameters, callback);
        }

        function getDadosUsuarios(callback) {
            var parameters = {};
            parameters['method'] = 'DadosUsuarios';

            return factory.TOTVSGet(parameters, callback);
        }

        function getResumoPagamento(coligada, boleto, callback) {
            var parameters = {
                method: 'ResumoPagamento',
                codColigada: coligada,
                idBoleto: boleto
            };

            return factory.TOTVSGet(parameters, callback);
        }

        function getCarteiraDigital(callback) {
            var parameters = {};
            parameters['method'] = 'CarteiraDigital';

            return factory.TOTVSGet(parameters, callback);
        }

        function getQtdeCartoesCarteiraDigital(callback) {
            var parameters = {};
            parameters['method'] = 'QtdeCartoesCarteiraDigital';

            return factory.TOTVSGet(parameters, callback);
        }

        function novoCartao(coligada, filial, model, callback) {
            var parameters = {};
            parameters['method'] = 'CarteiraDigital/NovoCartao';
            parameters['codColigada'] = coligada;
            parameters['codFilial'] = filial;
            
            return factory.TOTVSPost(parameters, model, callback);
        }

        function apagarCartao(idCarteira, callback) {
            var parameters = {};
            parameters['method'] = 'CarteiraDigital/ApagaCartao';
            parameters['id'] = idCarteira;

            return factory.TOTVSUpdate(parameters, {}, callback);
        }

        function getCamposAntiFraude(model, callback) {
            var parameters = {};
            parameters['method'] = 'CamposAntiFraude';

            return factory.TOTVSPost(parameters, model, callback);
        }

        function gravaRecorrencia(model, callback) {
            var parameters = {};
            parameters['method'] = "GravaRecorrencia";

            return factory.TOTVSPost(parameters, model, callback);
        }

        function getRecorrencias(callback) {
            var parameters = {};
            parameters['method'] = 'GetRecorrencias';

            return factory.TOTVSGet(parameters, callback);
        }

        function apagarRecorrencia(idRecorrencia, callback) {
            var parameters = {};
            parameters['method'] = "ApagaRecorrencia";
            parameters['idRecorrencia'] = idRecorrencia;

            return factory.TOTVSUpdate(parameters, {}, callback);
        }

        function alterarCartaoRecorrencia(idRecorrencia, idCarteiraDigital, callback) {
            var parameters = {};
            parameters['method'] = "AlteraCartaoRecorrencia";
            parameters['idRecorrencia'] = idRecorrencia;
            parameters['idCarteiraDigital'] = idCarteiraDigital;

            return factory.TOTVSUpdate(parameters, {}, callback);
        }

        function retornaListaPaisesAsync(callback) {
            var parameters = {};
            parameters['method'] = "ListaPaises";
            return factory.TOTVSGet(parameters, callback);
        }

        function retornaListaEstadosAsync(callback) {
            var parameters = {};
            parameters['method'] = "ListaEstados";
            return factory.TOTVSGet(parameters, callback);
        }
    }
});
